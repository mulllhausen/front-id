<?php

if (!defined("processing_dir")) define("processing_dir", $argv[1]);
include_once(processing_dir."/css/globals.php");

?>
<? echo "<?"; ?>xml version="1.0" encoding="UTF-8"<? echo "?>"; ?> 
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1 Tiny//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-tiny.dtd">

<svg
    id="hexagon"
    version="1.1"
    baseProfile="basic"
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    width="100%"
    height="100%"
    viewBox="0 0 300 300"
    preserveAspectRatio="xMidYMid meet"
    class="global"
>
<style type="text/css"><![CDATA[
    .global {
        fill: none;
        -webkit-touch-callout: none; /* iOS Safari */
        -webkit-user-select: none;   /* Chrome/Safari/Opera */
        -khtml-user-select: none;    /* Konqueror */
        -moz-user-select: none;      /* Firefox */
        -ms-user-select: none;       /* IE/Edge */
        user-select: none;
    }
    .outer {
        fill: url(#goldGradient);
    }
    .middle {
        fill: white;
    }
    .inner {
        fill: <? echo css_background_color1_hex; ?>;
    }
    .profile-pic-clicker {
        pointer-events: visible;
        cursor: pointer;
        fill: white;
        fill-opacity: 0;<?/* transparent */?>
    }
    .profile-pic-clicker:hover {
        fill: white;
        fill-opacity: 0.4;
    }
    .shine-lightgold {
        stop-color: #fcbf22;
    }
    .shine-halfgold {
        stop-color: #814700;
    }
    .shine-white {
        stop-color: #faf0d9;
    }
    .dude {
        fill: white;
    }
    .goldGradient {
        gradientUnits: objectBoundingBox;
    }
]]></style>
<defs>
<?/*
    drawing a hexagon in an svg - not so simple!

    svg does not support polar coordinates, so we need to pick the hexagon side
    length so that it has a width and height as close to an integer as possible.

    a hexagon is made up of 6 equilateral trianges. the height of an equilateral
    triangle = sqrt(3) * base / 2. choose base = 150 and height = 129.90... so
    if we use 130 as the height then probably nobody will notice.

    see here for more accurate approximations (which would be overkill):
    math.stackexchange.com/a/3263295

    we only need one size of hexagon. then we can use scaled versions of it.
*/?>
    <polygon
        id="hexagonShape"
        points="-130,-75 0,-150 130,-75 130,75 0,150 -130,75"
    />
    <g id="dude" class="dude">
        <circle cx="0" cy="-300" r="90" />
<?
// create the body of the dude. an arc of radius 130 centered 75 up from the
// bottom
?>
        <path d="M 0,0 L -130,-75 A 130,130 0 0,1 130,-75 z" />
    </g>
<?/* color-gradient - start top right, end bottom left */?>
    <linearGradient
        id="goldGradient"
        class="goldGradient"
        x1="1"
        y1="0"
        x2="0"
        y2="1"
    >
        <animateTransform
            attributeName="gradientTransform"
            begin="0s"
            type="rotate"
<?/*
note: when "values" is specified, from and to are ignored
            from="0 0.5 0.5"
            to="360 0.5 0.5"

use "values" to attempt to simulate ease-in-out. is there a better way to do
this in a short amount of code that runs smoothly on low-end devices? maybe
keySplines, but i wonder if it runs smoothly. will have to check that some day.
*/?>
            values="0 0.5 0.5;
                   45 0.5 0.5;
                   90 0.5 0.5;
                  180 0.5 0.5;
                  270 0.5 0.5;
                  315 0.5 0.5;
                  360 0.5 0.5"
            keyTimes="0; 0.2; 0.3; 0.5; 0.7; 0.8; 1"
            dur="2s"
            repeatCount="1"
        />
        <stop offset="10%" class="shine-halfgold" />
        <stop offset="20%" class="shine-lightgold" />
        <stop offset="40%" class="shine-lightgold" />
        <stop offset="50%" class="shine-white" />
        <stop offset="60%" class="shine-halfgold" />
        <stop offset="80%" class="shine-lightgold" />
        <stop offset="100%" class="shine-halfgold" />
    </linearGradient>
</defs>
<?/* rect x="0" y="0" width="300" height="300" stroke="red" stroke-width="1"/ */?>
<g transform="translate(150,150)">
    <use href="#hexagonShape" class="outer" />
    <use href="#hexagonShape" transform="scale(0.95)" class="middle" />
    <use href="#hexagonShape" transform="scale(0.90)" class="inner" />
</g>
<?
// move the dude down by +286 ...
// +300 = down all the way to the bottom
// -7.5 = back up for the width of the outer hexagon (gold border) since
// 150 * 0.05 = 7.5
// -7.5 = back up for the width of the inner hexagon (white border)
// +1 otherwise there will be an artifact line between the dude and the grey
// background
?>
<g transform="translate(150,286)">
    <use href="#dude" transform="scale(0.55)" />
</g>
<g transform="translate(150,150)">
    <use
        id="profilePicClicker"
        href="#hexagonShape"
        transform="scale(0.90)"
        class="profile-pic-clicker"
    />
</g>
</svg>
